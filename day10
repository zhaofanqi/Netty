v36: 
  原生NIO存在的问题
   	1) NIO 的类库和API繁杂，使用麻烦： 需要熟练使用 Selector,ServerSocketChannel、SocketChannel等
	  2) 需要具备其他的额外技能， java多线程编程因为NIO编程涉及到 Reactor模式
	  3) 开发工作量和难度都非常大，例如客户端面临断连重连、网络闪断，半包读写，失败缓存，网络拥塞和异常流的处理
  Netty 官网说明
	  1) Netty 是 JBOSS提供的一个 Java开源框架.Netty 提供异步的、基于事件驱动的网络应用程序框架，用以快速开发高性能，高可靠性的网络IO等
	  2) Netty可以帮助你快速、简单的开发出一个网络应用，相当于简化和 流程化了NIO的 开发过程
  Netty 的 优点
	  1) 各种传输类型的统一API 阻塞和非阻塞 Socket; 基于灵活且可扩展的事件模型；高度可定制化的线程模型 --单线程，多个线程池
  	2) 使用方便，详细记录的 javadoc，用户指南和示例
   	3) 高性能，吞吐量高，延迟低，减少资源消耗，最小化不必要的内存复制
  	4) 安全： 完整的 SSL/TLS 和 startTLS支持
V37:   
  目前存在的线程模型基本介绍：
      1） 传统阻塞I/O服务模型
      2） Reactor 模式(反应器模式)
            根据Reactor数量和处理资源池线程的数量不同，有三种典型的实现
                  单Reactor单线程
                  单Reactor多线程
                  主从Reactor多线程
  Netty线程模型(Netty主要基于 主从Reactor多线程模型做了一定的改进，其中主从Reactor多线程模型有多个Reactor)
  
  传统阻塞I/O服务模型特点：
		1）采用阻塞IO模式获取输入的数据
		2）每个连接都需要独立的线程完成数据的输入，业务处理，数据返回
    
	传统阻塞I/O服务模型问题以及分析：（占据资源造成资源浪费）
		1) 当并发数很大，就会创建大量的线程，占用很大的系统资源
		2）连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在read操作，造成线程资源的浪费
  
 V38：
  Reactor模式的设计( 思想 ：IO 复用 + 线程池)
     针对传统阻塞I/O服务模型的2个缺点，解决方案（多路复用，线程池复用）
     1）基于I/O复用模型：多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，
          操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理
     2）基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程池处理，一个线程可以处理多个连接的业务
          多个客户端连接对应一个 ServiceHandler,一个 ServiceHandler 将需要处理的内容给线程池去处理。 
   
   Reactor模式中核心组成：
      1） Reactor : Reactor 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件作出反应。
      2） Handlers: 处理程序执行I/O事件要完成的实际事件 
