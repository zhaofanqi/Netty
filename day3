V8:
NIO基本介绍
NIO 同步非阻塞，相关类再java.nio下，并对原java.io包中的很多类进行了改写
NIO 三大核心部分： Channel(通道),Buffer(缓冲区),Selector(选择器)
NIO 是面向缓冲区或者面向块 编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区前后移动，这就增加了处理过程中的灵活性，
                                  使用它可以提供非阻塞式的高伸缩性网络
客户端的数据写入buffer或从buffer读取,buffer通过channel实现与selecotr之间的交互。正因为此，才说NIO是面向缓冲区/面向块                        
client---buffer---channel(read/write)--|
                                       |
client---buffer---channel(read/write)--|----selector-----  thread------| 
                                       |                               |
client---buffer---channel(read/write)--|                               |-----server
client---buffer---channel(read/write)--|                               |
                                       |                               |
client---buffer---channel(read/write)--|----selector-----  thread------| 
                                       | 
client---buffer---channel(read/write)--|

java NIO的非阻塞模式，使一个线程从某通道发送请求或者读取数据，但是它仅能得到目前可用的数据，如果没有可用的数据，就什么也不做，
              而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。非阻塞写也是如此，一个线程请求写入一些
              数据到某个通道，但不需要等待它完全写入，这个线程同时可以去做别的事情----事件驱动非阻塞
              
简单理解：NIO是可以做到一个线程处理多个操作，假设有10000个请求过来，根据实际情况，可以分配50个线程去处理而不用像BIO分配10000个线程
HTTP2.0使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级 
V9:案例：将数据写入buffer并且读出

NIO和BIO的比较：1）BIO以流的方式处理数据 NIO以块的方式处理数据，块IO的效率远高于流IO的效率
                2）BIO是阻塞的，NIO是非阻塞的
                3）BIO基于字节流和字符流进行操作，而NIO是基于Channel 和 Buffer进行操作，数据总是从通道读取到缓冲区，或者从缓冲区写入通道。
                            Selector用于监听多个通道的事件（比如：连接请求，数据到达）,因此使用单个线程就可以监听多个客户端通道
  
V10:
NIO 三大核心Selector,Channel ,Buffer 三者的关系
  1) 每个channel都对应一个Buffer
  2) Selector 对应了一个线程，一个Selector对应多个channel
  3) V9视频中的示意图，显示一个了有三个channel注册到了selector程序
  4）程序切换到哪个channel是由事件Event决定的，Event就是一个重要的概念
  5）Selector 会依据不同的事件，在各个通道上切换
** 6）Buffer就是一个内存块，底层是一个数组
  7）数据的读取/写入，是通过buffer,这个和BIO有本质区别。BIO中要不是输入要不是输出，不能双向，但是NIO的buffer是可读可写，但是需要使用flip()切换
  8） channel 是双向的，可以反应底层操作系统的情况，比如 Linux底层操作系统通道就是双向的， 

V11:
缓冲区(Buffer)
  基本介绍：缓冲区本质上是一个可以读写数据的内存块，可以理解成是一个容器对象（含数组），该对象提供了一组方法，可以轻松的使用内存块，缓冲区对象内置了一些机制
           ，能够跟踪和记录缓冲区的状态变化情况。channel提供从文件、网络读取数据的渠道，但是读取或者写入的数据必须经由Buffer. 
           NIO程序<--data---->缓冲区<----channel--->文件（NIO程序不可以直接读取，必须通过buffer）
  buffer类定义了所有的缓冲区都有的四个属性(这四个属性帮助了我们进行读写)
          1)Mark:标记，执行flip之后，该mark就会作废，一般不去修改它
          2)Capacity：容量，既可以容纳的最大数据量；在缓冲区创建时被设定并且不能改变
          3)Limit：表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作。且极限是可以修改的
          4)Position：位置，下一个要被读或写的元素的索引，每次读写缓冲区数据时都会改变该值，为下次读写做准备
 
 class Buffer中几个常用方法
          //jdk1.4引入的api
          public final int capacity()//返回此缓冲区的容量 
          public final int position() //返回此缓冲区的位置
          public final Buffer position(int newPosition)//设置此缓冲区的位置
          public final int limit()//返回此缓冲区的限制
          public final Buffer limit(int newLimit)//设置此缓冲区的限制 
          public final Buffer mark()//在此缓冲区的位置设置标记 
          public final Buffer reset()//将此缓冲区的位置重置为以前标记的位置
          public final Buffer clear()//清除此缓冲区，即将各个标记恢复到初始状态，但是数据并没有真正擦除 
          public final Buffer flip() //反转此缓冲区
          public final Buffer rewind()//重绕此缓冲区
          public final int remaining()//返回当前位置与限制之间是否有元素
          public final boolean hasRemaining()//告知当前位置和限制之间是否有元素
          public abstract boolean is ReadOnly()//告知此缓冲区是否为只读缓冲区
          //jdk1.6引入的api
          public abstract boolean hasArray();//告知此缓冲区是否具有可访问的底层实现数组
          public abstract Object array();//返回此缓冲区的底层实现数组
          public abstract int arrayOffset();//返回此缓冲区的底层实现数组中第一个缓冲区元素的偏移量
          public abstract boolean isDirect();//告知此缓冲区是否为直接缓冲区
 
 ByteBuffer:看Buffer实现类，8大基本数据类型中除了Boolean之外都有实现.最常用的就是ByteBuffer，因为网络传输使用的二进制。ByteBuffer支持与其他几种数据类型进行转换
 class ByteBuffer中几个常用方法：
          //缓冲区创建相关api
          public static ByteBuffer allocateDirect(int Capacity)//创建直接缓冲区+初始容量
          public static ByteBuffer allocate(int Capacity)//创建缓冲区+初始容量
          public static ByteBUffer wrap(byte[] array)// 把一个数组放到缓冲区中使用
          //构造初始化位置offset 和 上界 length 的缓冲区
          public static ByteBUffer wrap(byte[] array,int offset ,int length)
          // 缓冲区存取相关api
          public abstract byte get()//从当前位置position 上get()之后，position会自动+1
          public abstract byte get(int index)//从绝对位置get,position 不变
          public abstract ByteBUffer put(byte b) // 从当前位置上put之后，position会自动+1
          public abstract ByteBuffer put(int index,byte b ) 从绝对位置上put，position 不变
          
 
 
 
