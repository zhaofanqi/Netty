V39:
单Reactor 单线程(前面的群聊即很好的案例)
方案说明：
   1） Select 是前面 I/O复用模型介绍的标准网络编程API，可以实现应用程序通过一个阻塞对象监听多路连接请求
   2） Reactor对象通过Select监控客户端请求事件，收到事件后通过 Dispatch 进行分发
   3） 如果是建立连接请求事件，则由Acceptor 通过Accept进行处理连接请求，然后创建一个handler对象处理连接完成后的后续业务处理
   4） 如果不是建立连接事件，则由Reactor会分发调用对应的Handler来响应
   5） Handler会完成 Read-->业务处理---> send 的完成业务流程
 结合实例： 服务器端用一个线程通过多路复用搞定所有的IO操作，编码简单，清晰明了，但是客户端连接数量较多则无法支撑  
 方案优缺点分析：
    1） 优点：模型简单，没有多线程，进程通信、竞争的问题，全部都在一个线程中完成
    2） 缺点：性能问题，只有一个线程，无法完全发挥多核 CPU 的性能。Handler 在处理某个连接上的业务时，整个进程无法处理其他连接事件，易性能瓶颈
    3） 缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障
    4） 使用场景： 客户端的数量有限，处理业务非常快速，比如Redis在业务处理的时间复杂度O(1)的情况
    
 V40 :
 单Reactor多线程(与单Reactor 单线程对比： 业务处理交给了线程池去做)
    方案说明：
        1）Reactor对象通过Select监控客户端请求事件，收到事件后，通过dispatch进行分发
        2）如果是 建立连接的请求，则由Acceptor通过accept处理连接请求，然后创建一个Handler对象处理 完成连接后的各种事情
        3）如果不是连接请求，则由Reactor 分发调用连接对应的handler来处理
        4）handler只负责响应事件，不做具体的业务处理。通过read读取数据后，会分发给后面的worker线程池的某个线程处理业务
        5）worker线程池会分配独立线程完成真正的业务，并将结果返回给handler
        6）handler收到响应后，会将结果通过send返回给客户端
   优点和缺点：
      可以充分的利用多核CPU的处理能力；
      多线程数据共享和访问比较复杂，Reactor处理了所有的事件请求（监听和响应），在单线程中运行，在高并发场景容易出现性能瓶颈
      
 V41:
 主从Reactor多线程（相当于在原来的单Reactor多线程的基础上将 Reactor+Acceptor独立出来了） 
        实际上，主Reactor仅仅创建连接了，并将创建好的连接让subReactor进行监听了
   方案说明：
      1） Reactor 主线程 MainReactor对象通过select监听连接事件，收到事件后，通过Acceptor处理连接事件
      2） 当Acceptor处理连接事件后，MainReactor将连接分配给SubReactor
      3） SubReactor 将连接加入到连接队列进行监听，并创建handler进行各种事件处理
      4） 当有新事件发生时，subReactor就会调用对应的 handler处理
      5） handler通过读取数据，并纷发给后面的work线程池处理
      6） work线程池分配独立的worker线程处理业务，并返回结果
      7） handler收到响应的结果后，在通过send将结果返回给client
      8)  Reactor主线程可以对应多个Reactor子线程，即 MainReactor 可以关联多个SubReactor
  优点和缺点：
    1） 父线程与子线程的数据交互简单职责明确，父线程只需要接受新连接，子线程完成后续的业务处理
    2） 父线程与子线程的数据交互简单，Reactor主线程 只需要把新连接传给子线程，子线程无需返回数据
    3） 编程复杂度较高
  结合实例：Nginx 主从Reactor多线程模型，Memcached主从多线程，Netty主从多线程模型的支持
 
 Rector 模型的优点：
      响应快，不必为单个同步事件阻塞，虽然Reactor本身依然是同步的
      可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销
      扩展性好，可以方便的通过增加Reactor实例个数来充分利用cpu资源
      复用性好，Reactor模型本身与具体时间处理逻辑无关，具有很高的复用性
 
